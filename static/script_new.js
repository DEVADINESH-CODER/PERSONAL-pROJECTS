// DOM Elements
const chatHistory = document.getElementById('chatHistory');
const userInput = document.getElementById('userInput');
const languageSelector = document.getElementById('language');
const submitBtn = document.getElementById('submitBtn');
const clearBtn = document.getElementById('clearBtn');
const loginContainer = document.getElementById('loginContainer');
const chatContainer = document.getElementById('chatContainer');
const loginForm = document.getElementById('loginForm');
const loginEmail = document.getElementById('loginEmail');
const loginPassword = document.getElementById('loginPassword');
const loginError = document.getElementById('loginError');
const logoutBtn = document.getElementById('logoutBtn');

// Add message to chat
function addMessage(text, isUser = false) {
    const messageDiv = document.createElement('div');
    messageDiv.classList.add('message');
    messageDiv.classList.add(isUser ? 'user-message' : 'bot-message');
    
    const paragraph = document.createElement('p');
    paragraph.textContent = text;
    messageDiv.appendChild(paragraph);
    
    chatHistory.appendChild(messageDiv);
    chatHistory.scrollTop = chatHistory.scrollHeight;
    
    // Add subtle animation
    setTimeout(() => {
        messageDiv.style.opacity = '1';
        messageDiv.style.transform = 'translateY(0)';
    }, 10);
}

// Show loading indicator
function showLoading() {
    const loadingDiv = document.createElement('div');
    loadingDiv.classList.add('message', 'bot-message');
    loadingDiv.id = 'loadingMessage';
    loadingDiv.innerHTML = '<p>Thinking<span class="loading">...</span></p>';
    chatHistory.appendChild(loadingDiv);
    chatHistory.scrollTop = chatHistory.scrollHeight;
}

// Hide loading indicator
function hideLoading() {
    const loadingMessage = document.getElementById('loadingMessage');
    if (loadingMessage) {
        loadingMessage.remove();
    }
}

// Send message to backend
async function sendMessage() {
    const message = userInput.value.trim();
    const language = languageSelector.value;
    
    if (!message) return;
    
    // Add user message to chat
    addMessage(message, true);
    userInput.value = '';
    
    // Show loading indicator
    showLoading();
    
    try {
        // Send request to backend
        const response = await fetch('/ask', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: message,
                language: language
            })
        });
        
        const data = await response.json();
        
        // Hide loading indicator
        hideLoading();
        
        if (response.ok) {
            // Add bot response to chat
            addMessage(data.response);
        } else {
            addMessage(`Sorry, I encountered an error: ${data.error}`);
        }
    } catch (error) {
        // Hide loading indicator
        hideLoading();
        addMessage(`Sorry, I encountered an error: ${error.message}`);
    }
}

// Clear chat history
function clearChat() {
    chatHistory.innerHTML = '';
    
    // Add welcome message based on selected language
    const welcomeMessages = {
        'hi': 'рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рджрд░реНрдЬ рдХрд░реЗрдВред',
        'ta': 'ро╣ро▓рпЛ! роиро╛ройрпН роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН. роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.',
        'te': 'р░╣р░▓р▒Л! р░ир▒Зр░ир▒Б р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐. р░ор▒А р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░кр░Вр░кр░Вр░бр░┐.'
    };
    
    const currentLanguage = languageSelector.value;
    chatHistory.innerHTML = `<div class="message bot-message"><p>${welcomeMessages[currentLanguage]}</p></div>`;
    
    // Update other text elements to match the selected language
    updateWelcomeMessage();
}

// Show chat interface
function showChat() {
    loginContainer.style.display = 'none';
    chatContainer.style.display = 'flex';
}

// Show login interface
function showLogin() {
    chatContainer.style.display = 'none';
    loginContainer.style.display = 'flex';
}

// Handle login
async function handleLogin(email, password) {
    try {
        const response = await fetch('/login', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ email, password })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            showChat();
        } else {
            loginError.textContent = data.error;
        }
    } catch (error) {
        loginError.textContent = 'An error occurred during login.';
    }
}

// Handle logout
async function handleLogout() {
    try {
        await fetch('/logout', { method: 'POST' });
        showLogin();
    } catch (error) {
        console.error('Logout error:', error);
    }
}

// Check login status
async function checkLoginStatus() {
    try {
        const response = await fetch('/check-login');
        const data = await response.json();
        
        if (data.logged_in) {
            showChat();
        } else {
            showLogin();
        }
    } catch (error) {
        console.error('Error checking login status:', error);
        showLogin();
    }
}

// Update welcome message and other text elements when language changes
function updateWelcomeMessage() {
    const currentLanguage = languageSelector.value;
    
    // Update welcome messages based on language
    const welcomeMessages = {
        'en': 'Hello! I am your agricultural assistant. Please enter your question.',
        'hi': 'рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдкреНрд░рд╢реНрди рджрд░реНрдЬ рдХрд░реЗрдВред',
        'ta': 'ро╣ро▓рпЛ! роиро╛ройрпН роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН. роЙроЩрпНроХро│рпН роХрпЗро│рпНро╡ро┐ропрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН.',
        'te': 'р░╣р░▓р▒Л! р░ир▒Зр░ир▒Б р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐. р░ор▒А р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░кр░Вр░кр░Вр░бр░┐.',
        'bn': 'рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХред ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржиред'
    };
    
    // Update initial welcome message based on language
    const initialWelcomeMessages = {
        'en': 'Hello! I am your agricultural assistant. I can help you with crops, soil, weather, and pests.',
        'hi': 'рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдБред рдореИрдВ рдлрд╕рд▓реЛрдВ, рдорд┐рдЯреНрдЯреА, рдореМрд╕рдо рдФрд░ рдХреАрдЯреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБред',
        'ta': 'ро╣ро▓рпЛ! роиро╛ройрпН роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН. роиро╛ройрпН рокропро│рпН, роорогрпН, ро╡ро╛ройро┐ро▓рпИ рооро▒рпНро▒рпБроорпН рокрпВроЪрпНроЪро┐роХро│рпН рокро▒рпНро▒ро┐ роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙродро╡ роорпБроЯро┐ропрпБроорпН.',
        'te': 'р░╣р░▓р▒Л! р░ир▒Зр░ир▒Б р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐. р░ир▒Зр░ир▒Б р░кр░Вр░Яр░▓р▒Б, р░ир▒Зр░▓, р░╡р░╛р░др░╛р░╡р░░р░гр░В р░ор░░р░┐р░пр▒Б р░Хр▒Ар░Яр░Хр░╛р░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░ор░┐р░ор▒Нр░ор░▓р▒Нр░ир░┐ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░Чр░▓р░ир▒Б.',
        'bn': 'рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ рж╕рж╣рж╛ржпрж╝ржХред ржЖржорж┐ ржлрж╕рж▓, ржорж╛ржЯрж┐, ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржПржмржВ ржкрзЛржХрж╛ржорж╛ржХржбрж╝ рж╕ржорзНржкрж░рзНржХрзЗ ржЖржкржирж╛ржХрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржкрж╛рж░рж┐ред'
    };
    
    // Update AI expert text based on language
    const aiExpertTexts = {
        'en': 'AI Agricultural Expert',
        'hi': 'AI рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ',
        'ta': 'AI ро╡ро┐ро╡роЪро╛роп роиро┐рокрпБрогро░рпН',
        'te': 'AI р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░кр▒Бр░гр▒Бр░бр▒Б',
        'bn': 'AI ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ'
    };
    
    // Update quick tags based on language
    const quickTags = {
        'en': ['ЁЯМ╛ Crop', 'тШБя╕П Weather', 'ЁЯРЫ Pest'],
        'hi': ['ЁЯМ╛ рдлрд╕рд▓', 'тШБя╕П рдореМрд╕рдо', 'ЁЯРЫ рдХреАрдЯ'],
        'ta': ['ЁЯМ╛ рокропро│рпН', 'тШБя╕П ро╡ро╛ройро┐ро▓рпИ', 'ЁЯРЫ рокрпВроЪрпНроЪро┐'],
        'te': ['ЁЯМ╛ р░кр░Вр░Я', 'тШБя╕П р░╡р░╛р░др░╛р░╡р░░р░гр░В', 'ЁЯРЫ р░Хр▒Ар░Яр░Хр░В'],
        'bn': ['ЁЯМ╛ ржлрж╕рж▓', 'тШБя╕П ржЖржмрж╣рж╛ржУржпрж╝рж╛', 'ЁЯРЫ ржкрзЛржХрж╛']
    };
    
    // Update header subtitle based on language
    const headerSubtitles = {
        'en': 'ЁЯдЦ AI Agricultural Expert | ЁЯМН Multi-Language Support',
        'hi': 'ЁЯдЦ AI рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ | ЁЯМН рдмрд╣реБрднрд╛рд╖рд╛ рд╕рдорд░реНрдерди',
        'ta': 'ЁЯдЦ AI ро╡ро┐ро╡роЪро╛роп роиро┐рокрпБрогро░рпН | ЁЯМН рокро▓ роорпКро┤ро┐ роЖродро░ро╡рпБ',
        'te': 'ЁЯдЦ AI р░╡р▒Нр░пр░╡р░╕р░╛р░п р░ир░┐р░кр▒Бр░гр▒Бр░бр▒Б | ЁЯМН р░мр░╣р▒Бр░нр░╛р░╖р░╛ р░ор░жр▒Нр░жр░др▒Б',
        'bn': 'ЁЯдЦ AI ржХрзГрж╖рж┐ ржмрж┐рж╢рзЗрж╖ржЬрзНржЮ | ЁЯМН ржмрж╣рзБржнрж╛рж╖рж┐ржХ рж╕ржорж░рзНржержи'
    };
    
    // Update placeholder texts based on language
    const inputPlaceholders = {
        'en': 'ЁЯМ╛ Type your agricultural question here... (English/Hindi/Tamil/Telugu/Bengali)',
        'hi': 'ЁЯМ╛ рдЕрдкрдирд╛ рдХреГрд╖рд┐ рдкреНрд░рд╢реНрди рдпрд╣рд╛рдБ рдЯрд╛рдЗрдк рдХрд░реЗрдВ... (рд╣рд┐рдВрджреА/рддрдорд┐рд▓/рддреЗрд▓реБрдЧреБ рдореЗрдВ)',
        'ta': 'ЁЯМ╛ роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛роп роХрпЗро│рпНро╡ро┐ропрпИ роЗроЩрпНроХрпЗ родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНроХ... (ро╣ро┐роирпНродро┐/родрооро┐ро┤рпН/родрпЖро▓рпБроЩрпНроХрпБ)',
        'te': 'ЁЯМ╛ р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Зр░Хр▒Нр░Хр░б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐... (р░╣р░┐р░Вр░жр▒А/р░др░ор░┐р░│р░В/р░др▒Жр░▓р▒Бр░Чр▒Б)',
        'bn': 'ЁЯМ╛ ржПржЦрж╛ржирзЗ ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ ржкрзНрж░рж╢рзНржи ржЯрж╛ржЗржк ржХрж░рзБржи... (ржЗржВрж░рзЗржЬрж┐/рж╣рж┐ржирзНржжрж┐/рждрж╛ржорж┐рж▓/рждрзЗрж▓рзЗржЧрзБ/ржмрж╛ржВрж▓рж╛)'
    };
    
    // Update quick suggestion button texts based on language
    const quickSuggestions = {
        'en': [
            'ЁЯМ╛ Crop Problem',
            'тШБя╕П Weather',
            'ЁЯМ▒ Soil',
            'ЁЯРЫ Pest Control'
        ],
        'hi': [
            'ЁЯМ╛ рдлрд╕рд▓ рдХреА рд╕рдорд╕реНрдпрд╛',
            'тШБя╕П рдореМрд╕рдо',
            'ЁЯМ▒ рдорд┐рдЯреНрдЯреА',
            'ЁЯРЫ рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг'
        ],
        'ta': [
            'ЁЯМ╛ рокропро│рпН роЪро┐роХрпНроХро▓рпН',
            'тШБя╕П ро╡ро╛ройро┐ро▓рпИ',
            'ЁЯМ▒ роорогрпН',
            'ЁЯРЫ рокрпВроЪрпНроЪро┐ роХроЯрпНроЯрпБрокрпНрокро╛роЯрпБ'
        ],
        'te': [
            'ЁЯМ╛ р░кр░Вр░Я р░╕р░ор░╕р▒Нр░п',
            'тШБя╕П р░╡р░╛р░др░╛р░╡р░░р░гр░В',
            'ЁЯМ▒ р░ир▒Зр░▓',
            'ЁЯРЫ р░Хр▒Ар░Яр░Хр░╛р░▓ р░ир░┐р░пр░Вр░др▒Нр░░р░г'
        ],
        'bn': [
            'ЁЯМ╛ ржлрж╕рж▓ рж╕ржорж╕рзНржпрж╛',
            'тШБя╕П ржЖржмрж╣рж╛ржУржпрж╝рж╛',
            'ЁЯМ▒ ржорж╛ржЯрж┐',
            'ЁЯРЫ ржкрзЛржХрж╛ ржжржоржи'
        ]
    };
    
    // Update footer text based on language
    const footerTexts = {
        'en': 'ЁЯМ╛ Kisan Mitra is here to help with your farming | Verify important information',
        'hi': 'ЁЯМ╛ Kisan Mitra рдЖрдкрдХреЗ рдЦреЗрддреЛрдВ рдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реИ | рдорд╣рддреНрд╡рдкреВрд░реНрдг рдЬрд╛рдирдХрд╛рд░реА рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ',
        'ta': 'ЁЯМ╛ Kisan Mitra роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛ропродрпНродро┐ро▒рпНроХрпБ роЙродро╡ роЗроЩрпНроХрпЗ роЙро│рпНро│родрпБ | роорпБроХрпНроХро┐ропрооро╛рой родроХро╡ро▓рпНроХро│рпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН',
        'te': 'ЁЯМ╛ Kisan Mitra р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░пр░╛р░ир░┐р░Хр░┐ р░╕р░╣р░╛р░пр░В р░Ър▒Зр░пр░бр░╛р░ир░┐р░Хр░┐ р░Зр░Хр▒Нр░Хр░б р░Йр░Вр░жр░┐ | р░ор▒Бр░Цр▒Нр░пр░ор▒Ир░и р░╕р░ор░╛р░Ър░╛р░░р░╛р░ир▒Нр░ир░┐ р░зр▒Гр░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐',
        'bn': 'ЁЯМ╛ Kisan Mitra ржЖржкржирж╛рж░ ржХрзГрж╖рж┐ржХрж╛ржЬрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рждрзЗ ржПржЦрж╛ржирзЗ ржЙржкрж╕рзНржерж┐ржд | ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг рждржерзНржп ржпрж╛ржЪрж╛ржЗ ржХрж░рзБржи'
    };
    
    // Update logout button text based on language
    const logoutTexts = {
        'en': 'Logout',
        'hi': 'рд▓реЙрдЧрдЖрдЙрдЯ',
        'ta': 'ро╡рпЖро│ро┐ропрпЗро▒рпБ',
        'te': 'р░▓р░╛р░Чр▒Нр░Ер░╡р▒Бр░Яр▒Н',
        'bn': 'рж▓ржЧ ржЖржЙржЯ'
    };
    
    // Update the welcome message in chat
    if (chatContainer.style.display === 'flex') {
        const firstMessage = chatHistory.querySelector('.bot-message');
        if (firstMessage) {
            firstMessage.innerHTML = `<p>${welcomeMessages[currentLanguage]}</p>`;
        }
    }
    
    // Update initial welcome message in HTML
    const welcomeMessageElement = document.getElementById('welcomeMessage');
    if (welcomeMessageElement) {
        welcomeMessageElement.textContent = initialWelcomeMessages[currentLanguage];
    }
    
    // Update AI expert text
    const aiExpertTextElement = document.getElementById('aiExpertText');
    if (aiExpertTextElement) {
        aiExpertTextElement.textContent = aiExpertTexts[currentLanguage];
    }
    
    // Update quick tags
    const cropTagElement = document.getElementById('cropTag');
    const weatherTagElement = document.getElementById('weatherTag');
    const pestTagElement = document.getElementById('pestTag');
    
    if (cropTagElement && weatherTagElement && pestTagElement) {
        const tags = quickTags[currentLanguage];
        cropTagElement.textContent = tags[0];
        weatherTagElement.textContent = tags[1];
        pestTagElement.textContent = tags[2];
    }
    
    // Update header subtitle
    const headerSubtitleElement = document.getElementById('headerSubtitle');
    if (headerSubtitleElement) {
        headerSubtitleElement.textContent = headerSubtitles[currentLanguage];
    }
    
    // Update input placeholder
    if (userInput) {
        userInput.setAttribute('lang', currentLanguage);
        userInput.placeholder = inputPlaceholders[currentLanguage];
    }
    
    // Update quick suggestion buttons
    const suggestionButtons = document.querySelectorAll('footer .flex-wrap button');
    if (suggestionButtons.length > 0) {
        const suggestions = quickSuggestions[currentLanguage];
        suggestionButtons.forEach((button, index) => {
            if (suggestions[index]) {
                button.innerHTML = suggestions[index];
            }
        });
    }
    
    // Update footer text
    const footerTextElement = document.querySelector('footer .text-center');
    if (footerTextElement) {
        footerTextElement.innerHTML = `<i class="fas fa-shield-alt mr-1"></i> ${footerTexts[currentLanguage]}`;
    }
    
    // Update logout button text
    const logoutButton = document.getElementById('logoutBtn');
    if (logoutButton) {
        logoutButton.innerHTML = `<i class="fas fa-sign-out-alt mr-2"></i>${logoutTexts[currentLanguage]}`;
    }
}

// Initialize event listeners when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    // Event Listeners
    if (submitBtn) {
        submitBtn.addEventListener('click', sendMessage);
    }
    
    if (userInput) {
        userInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !e.shiftKey && chatContainer && chatContainer.style.display === 'flex') {
                e.preventDefault();
                sendMessage();
            }
        });
    }
    
    if (clearBtn) {
        clearBtn.addEventListener('click', clearChat);
    }
    
    if (loginForm) {
        loginForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const email = loginEmail.value.trim();
            const password = loginPassword.value.trim();
            
            if (email && password) {
                await handleLogin(email, password);
            } else {
                if (loginError) {
                    loginError.textContent = 'Please enter both email and password.';
                }
            }
        });
    }
    
    if (languageSelector) {
        languageSelector.addEventListener('change', updateWelcomeMessage);
    }
    
    if (logoutBtn) {
        logoutBtn.addEventListener('click', handleLogout);
    }
    
    // Add event listeners for quick suggestion buttons
    const quickSuggestionsContainer = document.getElementById('quickSuggestions');
    if (quickSuggestionsContainer) {
        quickSuggestionsContainer.addEventListener('click', function(e) {
            if (e.target.tagName === 'BUTTON') {
                handleQuickSuggestion(e.target);
            }
        });
    }
    
    // Initialize
    checkLoginStatus();
    updateWelcomeMessage();
});

// Add ripple effect to buttons
if (submitBtn) submitBtn.addEventListener('click', addRippleEffect);
if (clearBtn) clearBtn.addEventListener('click', addRippleEffect);
if (logoutBtn) logoutBtn.addEventListener('click', addRippleEffect);

// Handle quick suggestion button clicks
function handleQuickSuggestion(button) {
    const suggestionType = button.getAttribute('data-suggestion');
    const currentLanguage = languageSelector.value;
    
    // Define suggestion texts for each language and type
    const suggestionTexts = {
        'en': {
            'crop': 'Why are the leaves on my crop turning yellow?',
            'weather': 'What is today\'s weather like?',
            'soil': 'How to test the soil?',
            'pest': 'How to protect from pests?'
        },
        'hi': {
            'crop': 'рдореЗрд░реА рдлрд╕рд▓ рдореЗрдВ рдкреАрд▓реЗ рдкрддреНрддреЗ рдЖ рд░рд╣реЗ рд╣реИрдВ',
            'weather': 'рдЖрдЬ рдХрд╛ рдореМрд╕рдо рдХреИрд╕рд╛ рд╣реИ?',
            'soil': 'рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдВрдЪ рдХреИрд╕реЗ рдХрд░реЗрдВ?',
            'pest': 'рдХреАрдЯреЛрдВ рд╕реЗ рдХреИрд╕реЗ рдмрдЪрд╛рд╡?'
        },
        'ta': {
            'crop': 'роОройродрпБ рокропро▒рпНро▒ро┐ро▓рпН роороЮрпНроЪро│рпН роЗро▓рпИроХро│рпН роПройрпН ро╡ро░рпБроХро┐ройрпНро▒рой?',
            'weather': 'роЗройрпНро▒рпБ ро╡ро╛ройро┐ро▓рпИ роОрокрпНрокроЯро┐?',
            'soil': 'роорогрпНрогрпИ роОро╡рпНро╡ро╛ро▒рпБ роЪрпЛродро┐рокрпНрокродрпБ?',
            'pest': 'рокрпВроЪрпНроЪро┐роХро│ро┐роЯрооро┐ро░рпБроирпНродрпБ роОро╡рпНро╡ро╛ро▒рпБ рокро╛родрпБроХро╛рокрпНрокродрпБ?'
        },
        'te': {
            'crop': 'р░ир░╛ р░кр░Вр░Яр░▓р▒Л р░кр░╕р▒Бр░кр▒Б р░Жр░Хр▒Бр░▓р▒Б р░Ор░Вр░жр▒Бр░Хр▒Б р░╡р░╕р▒Нр░др▒Бр░ир▒Нр░ир░╛р░пр░┐?',
            'weather': 'р░И р░░р▒Лр░Ьр▒Б р░╡р░╛р░др░╛р░╡р░░р░гр░В р░Ор░▓р░╛ р░Йр░Вр░жр░┐?',
            'soil': 'р░ир▒Зр░▓ р░кр░░р▒Ар░Хр▒Нр░╖ р░Ор░▓р░╛ р░Ър▒Зр░пр░╛р░▓р░┐?',
            'pest': 'р░Хр▒Ар░Яр░Хр░╛р░▓ р░ир▒Бр░Вр░бр░┐ р░Ор░▓р░╛ р░░р░Хр▒Нр░╖р░┐р░Вр░Ър▒Бр░Хр▒Лр░╡р░╛р░▓р░┐?'
        },
        'bn': {
            'crop': 'ржЖржорж╛рж░ ржлрж╕рж▓рзЗрж░ ржкрж╛рждрж╛ ржХрзЗржи рж╣рж▓рзБржж рж╣ржпрж╝рзЗ ржпрж╛ржЪрзНржЫрзЗ?',
            'weather': 'ржЖржЬржХрзЗрж░ ржЖржмрж╣рж╛ржУржпрж╝рж╛ ржХрзЗржоржи?',
            'soil': 'ржорж╛ржЯрж┐ ржкрж░рзАржХрзНрж╖рж╛ ржХрж┐ржнрж╛ржмрзЗ ржХрж░ржмрзЗржи?',
            'pest': 'ржкрзЛржХрж╛ ржерзЗржХрзЗ ржХрж┐ржнрж╛ржмрзЗ рж╕рзБрж░ржХрзНрж╖рж╛ ржкрж╛ржмрзЗржи?'
        }
    };
    
    // Set the input value based on the selected language and suggestion type
    if (userInput && suggestionTexts[currentLanguage] && suggestionTexts[currentLanguage][suggestionType]) {
        userInput.value = suggestionTexts[currentLanguage][suggestionType];
        userInput.focus();
        
        // Add message to chat
        addMessage(suggestionTexts[currentLanguage][suggestionType], true);
        
        // Send message automatically
        sendMessage();
    }
}

// Add ripple effect function
function addRippleEffect(e) {
    const button = e.currentTarget;
    const circle = document.createElement('span');
    circle.classList.add('ripple');
    
    const diameter = Math.max(button.clientWidth, button.clientHeight);
    const radius = diameter / 2;
    
    circle.style.width = circle.style.height = `${diameter}px`;
    circle.style.left = `${e.clientX - button.getBoundingClientRect().left - radius}px`;
    circle.style.top = `${e.clientY - button.getBoundingClientRect().top - radius}px`;
    
    const ripple = button.getElementsByClassName('ripple')[0];
    if (ripple) {
        ripple.remove();
    }
    
    button.appendChild(circle);
}
